{"version":3,"sources":["http-common.js","services/tutorial.service.js","components/add-tutorial.component.js","components/tutorial.component.js","components/tutorials-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTutorial","props","onChangeTitle","bind","onChangeDescription","saveTutorial","newTutorial","state","description","published","submitted","e","this","setState","target","value","TutorialDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","Tutorial","getTutorial","updatePublished","updateTutorial","deleteTutorial","currentTutorial","message","match","params","prevState","status","update","history","push","TutorialsList","onChangeSearchTitle","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","searchTitle","tutorials","currentIndex","getAll","tutorial","index","deleteAll","findByTitle","placeholder","map","key","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.4ae0cbf8.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:8080/api\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from \"../http-common\";\r\n\r\nclass TutorialDataService {\r\n    getAll() {\r\n        return http.get(\"/tutorials\");\r\n    }\r\n\r\n    get(id) {\r\n        return http.get(`/tutorials/${id}`);\r\n    }\r\n\r\n    create(data) {\r\n        return http.post(\"/tutorials\", data);\r\n    }\r\n\r\n    update(id, data) {\r\n        return http.put(`/tutorials/${id}`, data);\r\n    }\r\n\r\n    delete(id) {\r\n        return http.delete(`/tutorials/${id}`);\r\n    }\r\n\r\n    deleteAll() {\r\n        return http.delete(`/tutorials`);\r\n    }\r\n\r\n    findByTitle(title) {\r\n        return http.get(`/tutorials?title=${title}`);\r\n    }\r\n}\r\n\r\nexport default new TutorialDataService();","import React, { Component } from \"react\";\r\nimport TutorialDataService from \"../services/tutorial.service\";\r\n\r\nexport default class AddTutorial extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeTitle = this.onChangeTitle.bind(this);\r\n        this.onChangeDescription = this.onChangeDescription.bind(this);\r\n        this.saveTutorial = this.saveTutorial.bind(this);\r\n        this.newTutorial = this.newTutorial.bind(this);\r\n\r\n        this.state = {\r\n            id: null,\r\n            title: \"\",\r\n            description: \"\",\r\n            published: false,\r\n\r\n            submitted: false\r\n        };\r\n    }\r\n\r\n    onChangeTitle(e) {\r\n        this.setState({\r\n            title: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeDescription(e) {\r\n        this.setState({\r\n            description: e.target.value\r\n        });\r\n    }\r\n\r\n    saveTutorial() {\r\n        var data = {\r\n            title: this.state.title,\r\n            description: this.state.description\r\n        };\r\n\r\n        TutorialDataService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    id: response.data.id,\r\n                    title: response.data.title,\r\n                    description: response.data.description,\r\n                    published: response.data.published,\r\n\r\n                    submitted: true\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    newTutorial() {\r\n        this.setState({\r\n            id: null,\r\n            title: \"\",\r\n            description: \"\",\r\n            published: false,\r\n\r\n            submitted: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"submit-form\">\r\n                {this.state.submitted ? (\r\n                    <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button className=\"btn btn-success\" onClick={this.newTutorial}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"title\">Title</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"title\"\r\n                                required\r\n                                value={this.state.title}\r\n                                onChange={this.onChangeTitle}\r\n                                name=\"title\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"description\"\r\n                                required\r\n                                value={this.state.description}\r\n                                onChange={this.onChangeDescription}\r\n                                name=\"description\"\r\n                            />\r\n                        </div>\r\n\r\n                        <button onClick={this.saveTutorial} className=\"btn btn-success\">\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport TutorialDataService from \"../services/tutorial.service\";\r\n\r\nexport default class Tutorial extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeTitle = this.onChangeTitle.bind(this);\r\n        this.onChangeDescription = this.onChangeDescription.bind(this);\r\n        this.getTutorial = this.getTutorial.bind(this);\r\n        this.updatePublished = this.updatePublished.bind(this);\r\n        this.updateTutorial = this.updateTutorial.bind(this);\r\n        this.deleteTutorial = this.deleteTutorial.bind(this);\r\n\r\n        this.state = {\r\n            currentTutorial: {\r\n                id: null,\r\n                title: \"\",\r\n                description: \"\",\r\n                published: false\r\n            },\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTutorial(this.props.match.params.id);\r\n    }\r\n\r\n    onChangeTitle(e) {\r\n        const title = e.target.value;\r\n\r\n        this.setState(function(prevState) {\r\n            return {\r\n                currentTutorial: {\r\n                    ...prevState.currentTutorial,\r\n                    title: title\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    onChangeDescription(e) {\r\n        const description = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentTutorial: {\r\n                ...prevState.currentTutorial,\r\n                description: description\r\n            }\r\n        }));\r\n    }\r\n\r\n    getTutorial(id) {\r\n        TutorialDataService.get(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentTutorial: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    updatePublished(status) {\r\n        var data = {\r\n            id: this.state.currentTutorial.id,\r\n            title: this.state.currentTutorial.title,\r\n            description: this.state.currentTutorial.description,\r\n            published: status\r\n        };\r\n\r\n        TutorialDataService.update(this.state.currentTutorial.id, data)\r\n            .then(response => {\r\n                this.setState(prevState => ({\r\n                    currentTutorial: {\r\n                        ...prevState.currentTutorial,\r\n                        published: status\r\n                    }\r\n                }));\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    updateTutorial() {\r\n        TutorialDataService.update(\r\n            this.state.currentTutorial.id,\r\n            this.state.currentTutorial\r\n        )\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    message: \"The tutorial was updated successfully!\"\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    deleteTutorial() {\r\n        TutorialDataService.delete(this.state.currentTutorial.id)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.props.history.push('/tutorials')\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { currentTutorial } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {currentTutorial ? (\r\n                    <div className=\"edit-form\">\r\n                        <h4>Tutorial</h4>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"title\">Title</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"title\"\r\n                                    value={currentTutorial.title}\r\n                                    onChange={this.onChangeTitle}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"description\"\r\n                                    value={currentTutorial.description}\r\n                                    onChange={this.onChangeDescription}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label>\r\n                                    <strong>Status:</strong>\r\n                                </label>\r\n                                {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n                            </div>\r\n                        </form>\r\n\r\n                        {currentTutorial.published ? (\r\n                            <button\r\n                                className=\"badge badge-primary mr-2\"\r\n                                onClick={() => this.updatePublished(false)}\r\n                            >\r\n                                UnPublish\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                className=\"badge badge-primary mr-2\"\r\n                                onClick={() => this.updatePublished(true)}\r\n                            >\r\n                                Publish\r\n                            </button>\r\n                        )}\r\n\r\n                        <button\r\n                            className=\"badge badge-danger mr-2\"\r\n                            onClick={this.deleteTutorial}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"badge badge-success\"\r\n                            onClick={this.updateTutorial}\r\n                        >\r\n                            Update\r\n                        </button>\r\n                        <p>{this.state.message}</p>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <br />\r\n                        <p>Please click on a Tutorial...</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport TutorialDataService from \"../services/tutorial.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class TutorialsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n        this.retrieveTutorials = this.retrieveTutorials.bind(this);\r\n        this.refreshList = this.refreshList.bind(this);\r\n        this.setActiveTutorial = this.setActiveTutorial.bind(this);\r\n        this.removeAllTutorials = this.removeAllTutorials.bind(this);\r\n        this.searchTitle = this.searchTitle.bind(this);\r\n\r\n        this.state = {\r\n            tutorials: [],\r\n            currentTutorial: null,\r\n            currentIndex: -1,\r\n            searchTitle: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrieveTutorials();\r\n    }\r\n\r\n    onChangeSearchTitle(e) {\r\n        const searchTitle = e.target.value;\r\n\r\n        this.setState({\r\n            searchTitle: searchTitle\r\n        });\r\n    }\r\n\r\n    retrieveTutorials() {\r\n        TutorialDataService.getAll()\r\n            .then(response => {\r\n                this.setState({\r\n                    tutorials: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    refreshList() {\r\n        this.retrieveTutorials();\r\n        this.setState({\r\n            currentTutorial: null,\r\n            currentIndex: -1\r\n        });\r\n    }\r\n\r\n    setActiveTutorial(tutorial, index) {\r\n        this.setState({\r\n            currentTutorial: tutorial,\r\n            currentIndex: index\r\n        });\r\n    }\r\n\r\n    removeAllTutorials() {\r\n        TutorialDataService.deleteAll()\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.refreshList();\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    searchTitle() {\r\n        this.setState({\r\n            currentTutorial: null,\r\n            currentIndex: -1\r\n        });\r\n\r\n        TutorialDataService.findByTitle(this.state.searchTitle)\r\n            .then(response => {\r\n                this.setState({\r\n                    tutorials: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { searchTitle, tutorials, currentTutorial, currentIndex } = this.state;\r\n\r\n        return (\r\n            <div className=\"list row\">\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Search by title\"\r\n                            value={searchTitle}\r\n                            onChange={this.onChangeSearchTitle}\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                type=\"button\"\r\n                                onClick={this.searchTitle}\r\n                            >\r\n                                Search\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <h4>Tutorials List</h4>\r\n\r\n                    <ul className=\"list-group\">\r\n                        {tutorials &&\r\n                            tutorials.map((tutorial, index) => (\r\n                                <li\r\n                                    className={\r\n                                        \"list-group-item \" +\r\n                                        (index === currentIndex ? \"active\" : \"\")\r\n                                    }\r\n                                    onClick={() => this.setActiveTutorial(tutorial, index)}\r\n                                    key={index}\r\n                                >\r\n                                    {tutorial.title}\r\n                                </li>\r\n                            ))}\r\n                    </ul>\r\n\r\n                    <button\r\n                        className=\"m-3 btn btn-sm btn-danger\"\r\n                        onClick={this.removeAllTutorials}\r\n                    >\r\n                        Remove All\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {currentTutorial ? (\r\n                        <div>\r\n                            <h4>Tutorial</h4>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Title:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTutorial.title}\r\n                            </div>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Description:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTutorial.description}\r\n                            </div>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Status:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n                            </div>\r\n\r\n                            <Link\r\n                                to={\"/tutorials/\" + currentTutorial.id}\r\n                                className=\"badge badge-warning\"\r\n                            >\r\n                                Edit\r\n                            </Link>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <br />\r\n                            <p>Please click on a Tutorial...</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport AddTutorial from \"./components/add-tutorial.component\";\r\nimport Tutorial from \"./components/tutorial.component\";\r\nimport TutorialsList from \"./components/tutorials-list.component\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n                    <Link to={\"/tutorials\"} className=\"navbar-brand\">\r\n                        bezKoder\r\n                    </Link>\r\n                    <div className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to={\"/tutorials\"} className=\"nav-link\">\r\n                                Tutorials\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to={\"/add\"} className=\"nav-link\">\r\n                                Add\r\n                            </Link>\r\n                        </li>\r\n                    </div>\r\n                </nav>\r\n\r\n                <div className=\"container mt-3\">\r\n                    <Switch>\r\n                        <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\r\n                        <Route exact path=\"/add\" component={AddTutorial} />\r\n                        <Route path=\"/tutorials/:id\" component={Tutorial} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}